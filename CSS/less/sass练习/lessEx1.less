// 变量
@width: 10px;
@height: @width + 10px;

#header {
  width: @width;
  height: @height;
}

//Mixins 混合（Mixin）是一种将一组属性从一个规则集包含（或混入）到另一个规则集的方法。
//1.
.bordered {
    border-top: dotted 1px black;
    border-bottom: solid 2px black;
  }
  #menu a {
    color: #111;
    .bordered();
  }
  
  .post a {
    color: red;
    .bordered();
  }

//2.
.block {
    width: @width;
    height:@height;
    border: 10px solid #ccc;
} 

.box1:extend(.block){
    background: red;
}

// 嵌套
#header {
    color: black;
    .navigation {
      font-size: 12px;
    }
    .logo {
      width: 300px;
    }
  }

  .clearfix {
    display: block;
    zoom: 1;
  
    &:after {
      content: " ";
      display: block;
      font-size: 0;
      height: 0;
      clear: both;
      visibility: hidden;
    }
  }

  // @规则嵌套和冒泡
  // @可以与选择器以相同的方式进行嵌套。@ 规则会被放在前面，
  // 同一规则集中的其它元素的相对顺序保持不变。这叫做冒泡（bubbling）。
  .component {
    width: 300px;
    @media (min-width: 768px) {
      width: 600px;
      @media  (min-resolution: 192dpi) {
        background-image: url(/img/retina2x.png);
      }
    }
    @media (min-width: 1280px) {
      width: 800px;
    }
  }

  // 运算（Operations） calc() 特例
  // 所有操作数被转换成相同的单位
@conversion-1: 5cm + 10mm; // 结果是 6cm
@conversion-2: 2 - 3cm - 5mm; // 结果是 -1.5cm

// conversion is impossible
@incompatible-units: 2 + 5px - 3cm; // 结果是 4px

// example with variables
@base: 5%;
@filler: @base * 2; // 结果是 10%
@other: @base + @filler; // 结果是 15%
// 还可以对颜色进行算术运算：
@color: #224488 / 2; //结果是 #112244
.body {background-color: #112244 + #111;}// 结果是 #223355
  // 转义（Escaping）
  // 函数（Functions）
  // 命名空间和访问符
  // 映射（Maps）
  // 作用域（Scope）

  // 导入（Importing）
  // “导入”的工作方式和你预期的一样。你可以导入一个 .less 文件，此文件中的所有变量就可以全部使用了。如果导入的文件是 .less 扩展名，则可以将扩展名省略掉：